[
    "### CGC workflow ###",

    "### 论文中的流程描述 ###",
    "### 1，由Sn计算所有对应的配分（杨图） ###",
    "### 2，计算杨图对应的特征标 ###",
    "### 3，建立从特征标到对应杨图的信息 ###",
    "### 4，建立分支律 ###",
    "### 5，杨盘（杨盘是填了数字的杨图） ###",
    "### 6，建立（ij）临近交换矩阵 ###",
    "### 7，计算（in）交换矩阵 ###",
    "### 8，建立CG序列 ###",
    "### 9，计算ISF的CSCO矩阵（SUM_(i=1)（in））###",
    "### 10，解矩阵得到整体上有一个（-1）自由相位的ISF ###",
    "### 11，通过绝对相位规定、相对相位规定调整，使之同Yamanouchi相位相同 ###",
    "### 12，由n的ISF和（n - 1）的CG系数计算n的CG系数 ###",

    "### workflow图 ###",
    "### l: layer, n: node",
    "###               |> l3n1 -> f4 --|              ###",
    "### l1n1 -> l2n1 -|                |--> f6 --> f7 ###",
    "###               |> f5 ---------|              ###",
    {
        "name": "l1n1_young_diagrams",
        "func": ["None.src.core.young_diagrams", "create_young_diagrams", ""],
        "type": "cold",
        "inputs": ["input:::s_n:s_n"],
        "outputs": ["l1n1:::flag", "l1n1:::s_n:s_n"],
        "extra_args": [],
        "extra_kwargs": {},
        "next_nodes": ["l2n1_young_diagrams"],
        "flags": []
    },
    {
        "name": "l2n1_branching_laws",
        "func": ["None.src.core.branching_laws", "create_branching_laws", ""],
        "type": "cold",
        "inputs": ["l1n1:::s_n:s_n"],
        "outputs": ["l2n1:::flag", "l2n1:::s_n:s_n"],
        "extra_args": [],
        "extra_kwargs": {},
        "next_nodes": ["l3n1_young_tableaux"],
        "flags": []
    },
    {
        "name": "l3n1_young_tableaux",
        "func": ["None.src.core.young_tableaux", "create_young_tableaux", ""],
        "type": "cold",
        "inputs": ["l2n1:::s_n:s_n"],
        "outputs": ["l3n1:::flag", "l3n1:::s_n:s_n"],
        "extra_args": [],
        "extra_kwargs": {},
        "next_nodes": ["l4n1_yamanouchi_matrix"],
        "flags": []
    },
    {
        "name": "l4n1_yamanouchi_matrix",
        "func": ["None.src.core.yamanouchi_matrix", "create_yamanouchi_matrix", ""],
        "type": "cold",
        "inputs": ["l3n1:::s_n:s_n"],
        "outputs": ["l4n1:::flag", "l4n1:::s_n:s_n"],
        "extra_args": [],
        "extra_kwargs": {},
        "next_nodes": ["..."],
        "flags": []
    },
    {
        "name": "f5",
        "func": ["None.test.fake.fake_core", "where_am_i", ""],
        "type": "cold",
        "inputs": ["param2:::flag:normal_flag"],
        "outputs": ["path"],
        "extra_args": [],
        "extra_kwargs": {},
        "next_nodes": ["f6"],
        "flags": []
    },
    {
        "name": "f6",
        "func": ["None.test.fake.fake_core", "merge", "merge_merge"],
        "type": "cold",
        "inputs": ["pw_name:param_1", "path:param_2"],
        "outputs": ["rst"],
        "extra_args": [],
        "extra_kwargs": {},
        "next_nodes": ["f7"],
        "flags": []
    },
    {
        "name": "f7",
        "func": ["None.test.fake.fake_core", "self_defined_print", ""],
        "type": "cold",
        "inputs": ["rst:print_str"],
        "outputs": ["flag"],
        "extra_args": [],
        "extra_kwargs": {},
        "next_nodes": [],
        "flags": []
    }
]